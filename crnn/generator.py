from itertools import cycle

import numpy as np

from crnn.cfg import *


class DataGenerator:
    """ Walk through the data pack generated by preprocess.py """

    def __init__(self, txt_path):
        self.txt_path = txt_path
        self.batch_size = BATCH_SIZE
        self.input_length_val = IMG_SIZE[0] // DOWNSAMPLE_FACTOR - 2
        # Read from txt file
        with open(self.txt_path, 'r') as f:
            self.paths = [line.rstrip('\n') for line in f.readlines()]

        self.x = None
        self.y = None
        self.data_nbr = len(self.paths) * PACK_NBR_MAX

    def load_pack(self, pack_name: str):
        data = np.load('../dataset/card_nbr/augs/' + pack_name)
        self.x = data['x']
        self.y = data['y']

    def flow(self):
        # Feed inputs and outputs to training generator
        input_length = np.full((self.batch_size, 1), self.input_length_val, dtype=np.float64)
        labels_length = np.zeros((self.batch_size, 1))

        for path in cycle(self.paths):
            self.load_pack(path)
            for i in range(PACK_NBR_MAX // self.batch_size):
                data = self.x[i * self.batch_size: (i+1) * self.batch_size]
                data = np.array(data, dtype=np.float64) / 255.0 * 2.0 - 1.0
                data = np.expand_dims(data, axis=-1)

                labels = self.y[i * self.batch_size: (i+1) * self.batch_size]
                for k, label in enumerate(labels):
                    labels_length[k][0] = len([c for c in label
                                               if c != ENCODE_DICT['_']])

                inputs = {
                    "labels": labels,
                    "img_inputs": data,
                    "input_length": input_length,
                    "label_length": labels_length
                }
                outputs = {"ctc_loss_output": np.zeros((self.batch_size, 1), dtype=np.float64)}

                yield inputs, outputs
